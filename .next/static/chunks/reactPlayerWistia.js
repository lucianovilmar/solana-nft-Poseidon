"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["reactPlayerWistia"],{

/***/ "(app-pages-browser)/./node_modules/super-media-element/super-media-element.js":
/*!*****************************************************************!*\
  !*** ./node_modules/super-media-element/super-media-element.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Events: () => (/* binding */ Events),\n/* harmony export */   SuperAudioElement: () => (/* binding */ SuperAudioElement),\n/* harmony export */   SuperMediaMixin: () => (/* binding */ SuperMediaMixin),\n/* harmony export */   SuperVideoElement: () => (/* binding */ SuperVideoElement),\n/* harmony export */   template: () => (/* binding */ template)\n/* harmony export */ });\n/**\n * Super Media Element\n * Based on https://github.com/muxinc/custom-video-element - Mux - MIT License\n *\n * The goal is to create an element that works just like the video element\n * but can be extended/sub-classed, because native elements cannot be\n * extended today across browsers. Support for extending async loaded video\n * like API's. e.g. video players.\n */\n\n// The onevent like props are weirdly set on the HTMLElement prototype with other\n// generic events making it impossible to pick these specific to HTMLMediaElement.\nconst Events = [\n  'abort',\n  'canplay',\n  'canplaythrough',\n  'durationchange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'loadeddata',\n  'loadedmetadata',\n  'loadstart',\n  'pause',\n  'play',\n  'playing',\n  'progress',\n  'ratechange',\n  'seeked',\n  'seeking',\n  'stalled',\n  'suspend',\n  'timeupdate',\n  'volumechange',\n  'waiting',\n  'waitingforkey',\n  'resize',\n  'enterpictureinpicture',\n  'leavepictureinpicture',\n  'webkitbeginfullscreen',\n  'webkitendfullscreen',\n  'webkitpresentationmodechanged',\n];\n\nconst template = globalThis.document?.createElement('template');\n\nif (template) {\n  template.innerHTML = /*html*/`\n    <style>\n      :host {\n        display: inline-block;\n        line-height: 0;\n      }\n\n      video,\n      audio {\n        max-width: 100%;\n        max-height: 100%;\n        min-width: 100%;\n        min-height: 100%;\n      }\n    </style>\n    <slot></slot>\n  `;\n}\n\n/**\n * @see https://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n */\nconst SuperMediaMixin = (superclass, { tag, is }) => {\n\n  const nativeElTest = globalThis.document?.createElement(tag, { is });\n  const nativeElProps = nativeElTest ? getNativeElProps(nativeElTest) : [];\n\n  return class SuperMedia extends superclass {\n    static Events = Events;\n    static template = template;\n    static skipAttributes = [];\n    static #isDefined;\n\n    static get observedAttributes() {\n      SuperMedia.#define();\n\n      // Include any attributes from the custom built-in.\n      const natAttrs = nativeElTest?.constructor?.observedAttributes ?? [];\n\n      return [\n        ...natAttrs,\n        'autopictureinpicture',\n        'disablepictureinpicture',\n        'disableremoteplayback',\n        'autoplay',\n        'controls',\n        'controlslist',\n        'crossorigin',\n        'loop',\n        'muted',\n        'playsinline',\n        'poster',\n        'preload',\n        'src',\n      ];\n    }\n\n    static #define() {\n      if (this.#isDefined) return;\n      this.#isDefined = true;\n\n      const propsToAttrs = new Set(this.observedAttributes);\n      // defaultMuted maps to the muted attribute, handled manually below.\n      propsToAttrs.delete('muted');\n\n      // Passthrough native el functions from the custom el to the native el\n      for (let prop of nativeElProps) {\n        if (prop in this.prototype) continue;\n\n        const type = typeof nativeElTest[prop];\n        if (type == 'function') {\n          // Function\n          this.prototype[prop] = function (...args) {\n            this.#init();\n\n            const fn = () => {\n              if (this.call) return this.call(prop, ...args);\n              return this.nativeEl[prop].apply(this.nativeEl, args);\n            };\n\n            if (this.loadComplete && !this.isLoaded) {\n              return this.loadComplete.then(fn);\n            }\n            return fn();\n          };\n        } else {\n          // Some properties like src, preload, defaultMuted are handled manually.\n\n          // Getter\n          let config = {\n            get() {\n              this.#init();\n\n              let attr = prop.toLowerCase();\n              if (propsToAttrs.has(attr)) {\n                const val = this.getAttribute(attr);\n                return val === null ? false : val === '' ? true : val;\n              }\n\n              return this.get?.(prop) ?? this.nativeEl?.[prop] ?? this.#standinEl[prop];\n            },\n          };\n\n          if (prop !== prop.toUpperCase()) {\n            // Setter (not a CONSTANT)\n            config.set = async function (val) {\n              this.#init();\n\n              let attr = prop.toLowerCase();\n              if (propsToAttrs.has(attr)) {\n                if (val === true || val === false || val == null) {\n                  this.toggleAttribute(attr, Boolean(val));\n                } else {\n                  this.setAttribute(attr, val);\n                }\n                return;\n              }\n\n              if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n              if (this.set) {\n                this.set(prop, val);\n                return;\n              }\n\n              this.nativeEl[prop] = val;\n            };\n          }\n\n          Object.defineProperty(this.prototype, prop, config);\n        }\n      }\n    }\n\n    #isInit;\n    #loadComplete;\n    #hasLoaded = false;\n    #isLoaded = false;\n    #nativeEl;\n    #standinEl;\n\n    constructor() {\n      super();\n\n      if (!this.shadowRoot) {\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.append(this.constructor.template.content.cloneNode(true));\n      }\n\n      // If a load method is provided in the child class create a load promise.\n      if (this.load !== SuperMedia.prototype.load) {\n        this.loadComplete = new PublicPromise();\n      }\n\n      // If the custom element is defined before the custom element's HTML is parsed\n      // no attributes will be available in the constructor (construction process).\n      // Wait until initializing in the attributeChangedCallback or\n      // connectedCallback or accessing any properties.\n    }\n\n    get loadComplete() {\n      return this.#loadComplete;\n    }\n\n    set loadComplete(promise) {\n      this.#isLoaded = false;\n      this.#loadComplete = promise;\n      promise?.then(() => {\n        this.#isLoaded = true;\n      });\n    }\n\n    get isLoaded() {\n      return this.#isLoaded;\n    }\n\n    get nativeEl() {\n      return this.#nativeEl\n        ?? this.shadowRoot.querySelector(tag)\n        ?? this.querySelector(tag);\n    }\n\n    set nativeEl(val) {\n      this.#nativeEl = val;\n    }\n\n    get defaultMuted() {\n      return this.hasAttribute('muted');\n    }\n\n    set defaultMuted(val) {\n      this.toggleAttribute('muted', Boolean(val));\n    }\n\n    get src() {\n      return this.getAttribute('src');\n    }\n\n    set src(val) {\n      this.setAttribute('src', `${val}`);\n    }\n\n    get preload() {\n      return this.getAttribute('preload') ?? this.nativeEl?.preload;\n    }\n\n    set preload(val) {\n      this.setAttribute('preload', `${val}`);\n    }\n\n    async #init() {\n      if (this.#isInit) return;\n      this.#isInit = true;\n\n      this.#initStandinEl();\n      this.#initNativeEl();\n\n      for (let prop of nativeElProps)\n        this.#upgradeProperty(prop);\n\n      // Keep some native child elements like track and source in sync.\n      const childMap = new Map();\n      // An unnamed <slot> will be filled with all of the custom element's\n      // top-level child nodes that do not have the slot attribute.\n      const slotEl = this.shadowRoot.querySelector('slot:not([name])');\n      slotEl?.addEventListener('slotchange', () => {\n        const removeNativeChildren = new Map(childMap);\n        slotEl\n          .assignedElements()\n          .filter((el) => ['track', 'source'].includes(el.localName))\n          .forEach(async (el) => {\n            // If the source or track is still in the assigned elements keep it.\n            removeNativeChildren.delete(el);\n            // Re-use clones if possible.\n            let clone = childMap.get(el);\n            if (!clone) {\n              clone = el.cloneNode();\n              childMap.set(el, clone);\n            }\n            if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n            this.nativeEl.append?.(clone);\n          });\n        removeNativeChildren.forEach((el) => el.remove());\n      });\n\n      // The video events are dispatched on the SuperMediaElement instance.\n      // This makes it possible to add event listeners before the element is upgraded.\n      for (let type of this.constructor.Events) {\n        this.shadowRoot.addEventListener?.(type, (evt) => {\n          if (evt.target !== this.nativeEl) return;\n          this.dispatchEvent(new CustomEvent(evt.type, { detail: evt.detail }));\n        }, true);\n      }\n    }\n\n    #upgradeProperty(prop) {\n      // Sets properties that are set before the custom element is upgraded.\n      // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n      if (Object.prototype.hasOwnProperty.call(this, prop)) {\n        const value = this[prop];\n        // Delete the set property from this instance.\n        delete this[prop];\n        // Set the value again via the (prototype) setter on this class.\n        this[prop] = value;\n      }\n    }\n\n    #initStandinEl() {\n      // Neither Chrome or Firefox support setting the muted attribute\n      // after using document.createElement.\n      // Get around this by setting the muted property manually.\n      const dummyEl = document.createElement(tag, { is });\n      dummyEl.muted = this.hasAttribute('muted');\n\n      for (let { name, value } of this.attributes) {\n        dummyEl.setAttribute(name, value);\n      }\n\n      this.#standinEl = {};\n      for (let name of getNativeElProps(dummyEl)) {\n        this.#standinEl[name] = dummyEl[name];\n      }\n\n      // unload dummy video element\n      dummyEl.removeAttribute('src');\n      dummyEl.load();\n    }\n\n    async #initNativeEl() {\n      if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n      // If there is no nativeEl by now, create it our bloody selves.\n      if (!this.nativeEl) {\n        const nativeEl = document.createElement(tag, { is });\n        nativeEl.part = tag;\n        this.shadowRoot.append(nativeEl);\n      }\n\n      // Neither Chrome or Firefox support setting the muted attribute\n      // after using document.createElement.\n      // Get around this by setting the muted property manually.\n      this.nativeEl.muted = this.hasAttribute('muted');\n    }\n\n    attributeChangedCallback(attrName, oldValue, newValue) {\n      // Initialize right after construction when the attributes become available.\n      this.#init();\n\n      // Only call loadSrc when the super class has a load method.\n      if (attrName === 'src' && this.load !== SuperMedia.prototype.load) {\n        this.#loadSrc();\n      }\n\n      this.#forwardAttribute(attrName, oldValue, newValue);\n    }\n\n    async #loadSrc() {\n      // The first time we use the Promise created in the constructor.\n      if (this.#hasLoaded) this.loadComplete = new PublicPromise();\n      this.#hasLoaded = true;\n\n      // Wait 1 tick to allow other attributes to be set.\n      await Promise.resolve();\n      await this.load();\n\n      this.loadComplete?.resolve();\n      await this.loadComplete;\n    }\n\n    async #forwardAttribute(attrName, oldValue, newValue) {\n      if (this.loadComplete && !this.isLoaded) await this.loadComplete;\n\n      // Ignore a few that don't need to be passed & skipped attributes.\n      // e.g. src: native element is using MSE and has a blob url as src attribute.\n      if (['id', 'class', ...this.constructor.skipAttributes].includes(attrName)) {\n        return;\n      }\n\n      if (newValue === null) {\n        this.nativeEl.removeAttribute?.(attrName);\n      } else {\n        this.nativeEl.setAttribute?.(attrName, newValue);\n      }\n    }\n\n    connectedCallback() {\n      this.#init();\n    }\n  };\n};\n\nfunction getNativeElProps(nativeElTest) {\n  // Map all native element properties to the custom element\n  // so that they're applied to the native element.\n  // Skipping HTMLElement because of things like \"attachShadow\"\n  // causing issues. Most of those props still need to apply to\n  // the custom element.\n  let nativeElProps = [];\n\n  // Walk the prototype chain up to HTMLElement.\n  // This will grab all super class props in between.\n  // i.e. VideoElement and MediaElement\n  for (\n    let proto = Object.getPrototypeOf(nativeElTest);\n    proto && proto !== HTMLElement.prototype;\n    proto = Object.getPrototypeOf(proto)\n  ) {\n    nativeElProps.push(...Object.getOwnPropertyNames(proto));\n  }\n\n  return nativeElProps;\n}\n\n/**\n * A utility to create Promises with convenient public resolve and reject methods.\n * @return {Promise}\n */\nclass PublicPromise extends Promise {\n  constructor(executor = () => {}) {\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\n\nconst SuperVideoElement = globalThis.document ? SuperMediaMixin(HTMLElement, { tag: 'video' }) : class {};\n\nconst SuperAudioElement = globalThis.document ? SuperMediaMixin(HTMLElement, { tag: 'audio' }) : class {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zdXBlci1tZWRpYS1lbGVtZW50L3N1cGVyLW1lZGlhLWVsZW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDTyx1Q0FBdUMsU0FBUzs7QUFFdkQsaUVBQWlFLElBQUk7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDLElBQUk7QUFDdEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsb0JBQW9CO0FBQzdFLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsSUFBSTtBQUN4RDs7QUFFQSxpQkFBaUIsY0FBYztBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxJQUFJO0FBQzNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFTywrRUFBK0UsY0FBYzs7QUFFN0YsK0VBQStFLGNBQWMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTFZTIDA2IERldlxcRGVza3RvcFxccHJvamV0b3Nub2RlanNcXHRlc3RlXFxub2RlX21vZHVsZXNcXHN1cGVyLW1lZGlhLWVsZW1lbnRcXHN1cGVyLW1lZGlhLWVsZW1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdXBlciBNZWRpYSBFbGVtZW50XG4gKiBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbXV4aW5jL2N1c3RvbS12aWRlby1lbGVtZW50IC0gTXV4IC0gTUlUIExpY2Vuc2VcbiAqXG4gKiBUaGUgZ29hbCBpcyB0byBjcmVhdGUgYW4gZWxlbWVudCB0aGF0IHdvcmtzIGp1c3QgbGlrZSB0aGUgdmlkZW8gZWxlbWVudFxuICogYnV0IGNhbiBiZSBleHRlbmRlZC9zdWItY2xhc3NlZCwgYmVjYXVzZSBuYXRpdmUgZWxlbWVudHMgY2Fubm90IGJlXG4gKiBleHRlbmRlZCB0b2RheSBhY3Jvc3MgYnJvd3NlcnMuIFN1cHBvcnQgZm9yIGV4dGVuZGluZyBhc3luYyBsb2FkZWQgdmlkZW9cbiAqIGxpa2UgQVBJJ3MuIGUuZy4gdmlkZW8gcGxheWVycy5cbiAqL1xuXG4vLyBUaGUgb25ldmVudCBsaWtlIHByb3BzIGFyZSB3ZWlyZGx5IHNldCBvbiB0aGUgSFRNTEVsZW1lbnQgcHJvdG90eXBlIHdpdGggb3RoZXJcbi8vIGdlbmVyaWMgZXZlbnRzIG1ha2luZyBpdCBpbXBvc3NpYmxlIHRvIHBpY2sgdGhlc2Ugc3BlY2lmaWMgdG8gSFRNTE1lZGlhRWxlbWVudC5cbmV4cG9ydCBjb25zdCBFdmVudHMgPSBbXG4gICdhYm9ydCcsXG4gICdjYW5wbGF5JyxcbiAgJ2NhbnBsYXl0aHJvdWdoJyxcbiAgJ2R1cmF0aW9uY2hhbmdlJyxcbiAgJ2VtcHRpZWQnLFxuICAnZW5jcnlwdGVkJyxcbiAgJ2VuZGVkJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvYWRlZGRhdGEnLFxuICAnbG9hZGVkbWV0YWRhdGEnLFxuICAnbG9hZHN0YXJ0JyxcbiAgJ3BhdXNlJyxcbiAgJ3BsYXknLFxuICAncGxheWluZycsXG4gICdwcm9ncmVzcycsXG4gICdyYXRlY2hhbmdlJyxcbiAgJ3NlZWtlZCcsXG4gICdzZWVraW5nJyxcbiAgJ3N0YWxsZWQnLFxuICAnc3VzcGVuZCcsXG4gICd0aW1ldXBkYXRlJyxcbiAgJ3ZvbHVtZWNoYW5nZScsXG4gICd3YWl0aW5nJyxcbiAgJ3dhaXRpbmdmb3JrZXknLFxuICAncmVzaXplJyxcbiAgJ2VudGVycGljdHVyZWlucGljdHVyZScsXG4gICdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLFxuICAnd2Via2l0YmVnaW5mdWxsc2NyZWVuJyxcbiAgJ3dlYmtpdGVuZGZ1bGxzY3JlZW4nLFxuICAnd2Via2l0cHJlc2VudGF0aW9ubW9kZWNoYW5nZWQnLFxuXTtcblxuZXhwb3J0IGNvbnN0IHRlbXBsYXRlID0gZ2xvYmFsVGhpcy5kb2N1bWVudD8uY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuaWYgKHRlbXBsYXRlKSB7XG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IC8qaHRtbCovYFxuICAgIDxzdHlsZT5cbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgIH1cblxuICAgICAgdmlkZW8sXG4gICAgICBhdWRpbyB7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgICAgbWluLXdpZHRoOiAxMDAlO1xuICAgICAgICBtaW4taGVpZ2h0OiAxMDAlO1xuICAgICAgfVxuICAgIDwvc3R5bGU+XG4gICAgPHNsb3Q+PC9zbG90PlxuICBgO1xufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9qdXN0aW5mYWduYW5pLmNvbS8yMDE1LzEyLzIxL3JlYWwtbWl4aW5zLXdpdGgtamF2YXNjcmlwdC1jbGFzc2VzL1xuICovXG5leHBvcnQgY29uc3QgU3VwZXJNZWRpYU1peGluID0gKHN1cGVyY2xhc3MsIHsgdGFnLCBpcyB9KSA9PiB7XG5cbiAgY29uc3QgbmF0aXZlRWxUZXN0ID0gZ2xvYmFsVGhpcy5kb2N1bWVudD8uY3JlYXRlRWxlbWVudCh0YWcsIHsgaXMgfSk7XG4gIGNvbnN0IG5hdGl2ZUVsUHJvcHMgPSBuYXRpdmVFbFRlc3QgPyBnZXROYXRpdmVFbFByb3BzKG5hdGl2ZUVsVGVzdCkgOiBbXTtcblxuICByZXR1cm4gY2xhc3MgU3VwZXJNZWRpYSBleHRlbmRzIHN1cGVyY2xhc3Mge1xuICAgIHN0YXRpYyBFdmVudHMgPSBFdmVudHM7XG4gICAgc3RhdGljIHRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgc3RhdGljIHNraXBBdHRyaWJ1dGVzID0gW107XG4gICAgc3RhdGljICNpc0RlZmluZWQ7XG5cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICAgIFN1cGVyTWVkaWEuI2RlZmluZSgpO1xuXG4gICAgICAvLyBJbmNsdWRlIGFueSBhdHRyaWJ1dGVzIGZyb20gdGhlIGN1c3RvbSBidWlsdC1pbi5cbiAgICAgIGNvbnN0IG5hdEF0dHJzID0gbmF0aXZlRWxUZXN0Py5jb25zdHJ1Y3Rvcj8ub2JzZXJ2ZWRBdHRyaWJ1dGVzID8/IFtdO1xuXG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi5uYXRBdHRycyxcbiAgICAgICAgJ2F1dG9waWN0dXJlaW5waWN0dXJlJyxcbiAgICAgICAgJ2Rpc2FibGVwaWN0dXJlaW5waWN0dXJlJyxcbiAgICAgICAgJ2Rpc2FibGVyZW1vdGVwbGF5YmFjaycsXG4gICAgICAgICdhdXRvcGxheScsXG4gICAgICAgICdjb250cm9scycsXG4gICAgICAgICdjb250cm9sc2xpc3QnLFxuICAgICAgICAnY3Jvc3NvcmlnaW4nLFxuICAgICAgICAnbG9vcCcsXG4gICAgICAgICdtdXRlZCcsXG4gICAgICAgICdwbGF5c2lubGluZScsXG4gICAgICAgICdwb3N0ZXInLFxuICAgICAgICAncHJlbG9hZCcsXG4gICAgICAgICdzcmMnLFxuICAgICAgXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgI2RlZmluZSgpIHtcbiAgICAgIGlmICh0aGlzLiNpc0RlZmluZWQpIHJldHVybjtcbiAgICAgIHRoaXMuI2lzRGVmaW5lZCA9IHRydWU7XG5cbiAgICAgIGNvbnN0IHByb3BzVG9BdHRycyA9IG5ldyBTZXQodGhpcy5vYnNlcnZlZEF0dHJpYnV0ZXMpO1xuICAgICAgLy8gZGVmYXVsdE11dGVkIG1hcHMgdG8gdGhlIG11dGVkIGF0dHJpYnV0ZSwgaGFuZGxlZCBtYW51YWxseSBiZWxvdy5cbiAgICAgIHByb3BzVG9BdHRycy5kZWxldGUoJ211dGVkJyk7XG5cbiAgICAgIC8vIFBhc3N0aHJvdWdoIG5hdGl2ZSBlbCBmdW5jdGlvbnMgZnJvbSB0aGUgY3VzdG9tIGVsIHRvIHRoZSBuYXRpdmUgZWxcbiAgICAgIGZvciAobGV0IHByb3Agb2YgbmF0aXZlRWxQcm9wcykge1xuICAgICAgICBpZiAocHJvcCBpbiB0aGlzLnByb3RvdHlwZSkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBuYXRpdmVFbFRlc3RbcHJvcF07XG4gICAgICAgIGlmICh0eXBlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBGdW5jdGlvblxuICAgICAgICAgIHRoaXMucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuI2luaXQoKTtcblxuICAgICAgICAgICAgY29uc3QgZm4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmNhbGwpIHJldHVybiB0aGlzLmNhbGwocHJvcCwgLi4uYXJncyk7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsW3Byb3BdLmFwcGx5KHRoaXMubmF0aXZlRWwsIGFyZ3MpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMubG9hZENvbXBsZXRlICYmICF0aGlzLmlzTG9hZGVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRDb21wbGV0ZS50aGVuKGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbigpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU29tZSBwcm9wZXJ0aWVzIGxpa2Ugc3JjLCBwcmVsb2FkLCBkZWZhdWx0TXV0ZWQgYXJlIGhhbmRsZWQgbWFudWFsbHkuXG5cbiAgICAgICAgICAvLyBHZXR0ZXJcbiAgICAgICAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICB0aGlzLiNpbml0KCk7XG5cbiAgICAgICAgICAgICAgbGV0IGF0dHIgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIGlmIChwcm9wc1RvQXR0cnMuaGFzKGF0dHIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/IGZhbHNlIDogdmFsID09PSAnJyA/IHRydWUgOiB2YWw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQ/Lihwcm9wKSA/PyB0aGlzLm5hdGl2ZUVsPy5bcHJvcF0gPz8gdGhpcy4jc3RhbmRpbkVsW3Byb3BdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHByb3AgIT09IHByb3AudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgLy8gU2V0dGVyIChub3QgYSBDT05TVEFOVClcbiAgICAgICAgICAgIGNvbmZpZy5zZXQgPSBhc3luYyBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgIHRoaXMuI2luaXQoKTtcblxuICAgICAgICAgICAgICBsZXQgYXR0ciA9IHByb3AudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgaWYgKHByb3BzVG9BdHRycy5oYXMoYXR0cikpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2UgfHwgdmFsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQXR0cmlidXRlKGF0dHIsIEJvb2xlYW4odmFsKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHIsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0aGlzLmxvYWRDb21wbGV0ZSAmJiAhdGhpcy5pc0xvYWRlZCkgYXdhaXQgdGhpcy5sb2FkQ29tcGxldGU7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQocHJvcCwgdmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLm5hdGl2ZUVsW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm90b3R5cGUsIHByb3AsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAjaXNJbml0O1xuICAgICNsb2FkQ29tcGxldGU7XG4gICAgI2hhc0xvYWRlZCA9IGZhbHNlO1xuICAgICNpc0xvYWRlZCA9IGZhbHNlO1xuICAgICNuYXRpdmVFbDtcbiAgICAjc3RhbmRpbkVsO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuXG4gICAgICBpZiAoIXRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZCh0aGlzLmNvbnN0cnVjdG9yLnRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSBsb2FkIG1ldGhvZCBpcyBwcm92aWRlZCBpbiB0aGUgY2hpbGQgY2xhc3MgY3JlYXRlIGEgbG9hZCBwcm9taXNlLlxuICAgICAgaWYgKHRoaXMubG9hZCAhPT0gU3VwZXJNZWRpYS5wcm90b3R5cGUubG9hZCkge1xuICAgICAgICB0aGlzLmxvYWRDb21wbGV0ZSA9IG5ldyBQdWJsaWNQcm9taXNlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBjdXN0b20gZWxlbWVudCBpcyBkZWZpbmVkIGJlZm9yZSB0aGUgY3VzdG9tIGVsZW1lbnQncyBIVE1MIGlzIHBhcnNlZFxuICAgICAgLy8gbm8gYXR0cmlidXRlcyB3aWxsIGJlIGF2YWlsYWJsZSBpbiB0aGUgY29uc3RydWN0b3IgKGNvbnN0cnVjdGlvbiBwcm9jZXNzKS5cbiAgICAgIC8vIFdhaXQgdW50aWwgaW5pdGlhbGl6aW5nIGluIHRoZSBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgb3JcbiAgICAgIC8vIGNvbm5lY3RlZENhbGxiYWNrIG9yIGFjY2Vzc2luZyBhbnkgcHJvcGVydGllcy5cbiAgICB9XG5cbiAgICBnZXQgbG9hZENvbXBsZXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuI2xvYWRDb21wbGV0ZTtcbiAgICB9XG5cbiAgICBzZXQgbG9hZENvbXBsZXRlKHByb21pc2UpIHtcbiAgICAgIHRoaXMuI2lzTG9hZGVkID0gZmFsc2U7XG4gICAgICB0aGlzLiNsb2FkQ29tcGxldGUgPSBwcm9taXNlO1xuICAgICAgcHJvbWlzZT8udGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuI2lzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldCBpc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLiNpc0xvYWRlZDtcbiAgICB9XG5cbiAgICBnZXQgbmF0aXZlRWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy4jbmF0aXZlRWxcbiAgICAgICAgPz8gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IodGFnKVxuICAgICAgICA/PyB0aGlzLnF1ZXJ5U2VsZWN0b3IodGFnKTtcbiAgICB9XG5cbiAgICBzZXQgbmF0aXZlRWwodmFsKSB7XG4gICAgICB0aGlzLiNuYXRpdmVFbCA9IHZhbDtcbiAgICB9XG5cbiAgICBnZXQgZGVmYXVsdE11dGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdtdXRlZCcpO1xuICAgIH1cblxuICAgIHNldCBkZWZhdWx0TXV0ZWQodmFsKSB7XG4gICAgICB0aGlzLnRvZ2dsZUF0dHJpYnV0ZSgnbXV0ZWQnLCBCb29sZWFuKHZhbCkpO1xuICAgIH1cblxuICAgIGdldCBzcmMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgIH1cblxuICAgIHNldCBzcmModmFsKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnc3JjJywgYCR7dmFsfWApO1xuICAgIH1cblxuICAgIGdldCBwcmVsb2FkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdwcmVsb2FkJykgPz8gdGhpcy5uYXRpdmVFbD8ucHJlbG9hZDtcbiAgICB9XG5cbiAgICBzZXQgcHJlbG9hZCh2YWwpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdwcmVsb2FkJywgYCR7dmFsfWApO1xuICAgIH1cblxuICAgIGFzeW5jICNpbml0KCkge1xuICAgICAgaWYgKHRoaXMuI2lzSW5pdCkgcmV0dXJuO1xuICAgICAgdGhpcy4jaXNJbml0ID0gdHJ1ZTtcblxuICAgICAgdGhpcy4jaW5pdFN0YW5kaW5FbCgpO1xuICAgICAgdGhpcy4jaW5pdE5hdGl2ZUVsKCk7XG5cbiAgICAgIGZvciAobGV0IHByb3Agb2YgbmF0aXZlRWxQcm9wcylcbiAgICAgICAgdGhpcy4jdXBncmFkZVByb3BlcnR5KHByb3ApO1xuXG4gICAgICAvLyBLZWVwIHNvbWUgbmF0aXZlIGNoaWxkIGVsZW1lbnRzIGxpa2UgdHJhY2sgYW5kIHNvdXJjZSBpbiBzeW5jLlxuICAgICAgY29uc3QgY2hpbGRNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAvLyBBbiB1bm5hbWVkIDxzbG90PiB3aWxsIGJlIGZpbGxlZCB3aXRoIGFsbCBvZiB0aGUgY3VzdG9tIGVsZW1lbnQnc1xuICAgICAgLy8gdG9wLWxldmVsIGNoaWxkIG5vZGVzIHRoYXQgZG8gbm90IGhhdmUgdGhlIHNsb3QgYXR0cmlidXRlLlxuICAgICAgY29uc3Qgc2xvdEVsID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ3Nsb3Q6bm90KFtuYW1lXSknKTtcbiAgICAgIHNsb3RFbD8uYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlTmF0aXZlQ2hpbGRyZW4gPSBuZXcgTWFwKGNoaWxkTWFwKTtcbiAgICAgICAgc2xvdEVsXG4gICAgICAgICAgLmFzc2lnbmVkRWxlbWVudHMoKVxuICAgICAgICAgIC5maWx0ZXIoKGVsKSA9PiBbJ3RyYWNrJywgJ3NvdXJjZSddLmluY2x1ZGVzKGVsLmxvY2FsTmFtZSkpXG4gICAgICAgICAgLmZvckVhY2goYXN5bmMgKGVsKSA9PiB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgc291cmNlIG9yIHRyYWNrIGlzIHN0aWxsIGluIHRoZSBhc3NpZ25lZCBlbGVtZW50cyBrZWVwIGl0LlxuICAgICAgICAgICAgcmVtb3ZlTmF0aXZlQ2hpbGRyZW4uZGVsZXRlKGVsKTtcbiAgICAgICAgICAgIC8vIFJlLXVzZSBjbG9uZXMgaWYgcG9zc2libGUuXG4gICAgICAgICAgICBsZXQgY2xvbmUgPSBjaGlsZE1hcC5nZXQoZWwpO1xuICAgICAgICAgICAgaWYgKCFjbG9uZSkge1xuICAgICAgICAgICAgICBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgICAgICAgICBjaGlsZE1hcC5zZXQoZWwsIGNsb25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxvYWRDb21wbGV0ZSAmJiAhdGhpcy5pc0xvYWRlZCkgYXdhaXQgdGhpcy5sb2FkQ29tcGxldGU7XG4gICAgICAgICAgICB0aGlzLm5hdGl2ZUVsLmFwcGVuZD8uKGNsb25lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgcmVtb3ZlTmF0aXZlQ2hpbGRyZW4uZm9yRWFjaCgoZWwpID0+IGVsLnJlbW92ZSgpKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUaGUgdmlkZW8gZXZlbnRzIGFyZSBkaXNwYXRjaGVkIG9uIHRoZSBTdXBlck1lZGlhRWxlbWVudCBpbnN0YW5jZS5cbiAgICAgIC8vIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gYWRkIGV2ZW50IGxpc3RlbmVycyBiZWZvcmUgdGhlIGVsZW1lbnQgaXMgdXBncmFkZWQuXG4gICAgICBmb3IgKGxldCB0eXBlIG9mIHRoaXMuY29uc3RydWN0b3IuRXZlbnRzKSB7XG4gICAgICAgIHRoaXMuc2hhZG93Um9vdC5hZGRFdmVudExpc3RlbmVyPy4odHlwZSwgKGV2dCkgPT4ge1xuICAgICAgICAgIGlmIChldnQudGFyZ2V0ICE9PSB0aGlzLm5hdGl2ZUVsKSByZXR1cm47XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChldnQudHlwZSwgeyBkZXRhaWw6IGV2dC5kZXRhaWwgfSkpO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAjdXBncmFkZVByb3BlcnR5KHByb3ApIHtcbiAgICAgIC8vIFNldHMgcHJvcGVydGllcyB0aGF0IGFyZSBzZXQgYmVmb3JlIHRoZSBjdXN0b20gZWxlbWVudCBpcyB1cGdyYWRlZC5cbiAgICAgIC8vIGh0dHBzOi8vd2ViLmRldi9jdXN0b20tZWxlbWVudHMtYmVzdC1wcmFjdGljZXMvI21ha2UtcHJvcGVydGllcy1sYXp5XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIHByb3ApKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twcm9wXTtcbiAgICAgICAgLy8gRGVsZXRlIHRoZSBzZXQgcHJvcGVydHkgZnJvbSB0aGlzIGluc3RhbmNlLlxuICAgICAgICBkZWxldGUgdGhpc1twcm9wXTtcbiAgICAgICAgLy8gU2V0IHRoZSB2YWx1ZSBhZ2FpbiB2aWEgdGhlIChwcm90b3R5cGUpIHNldHRlciBvbiB0aGlzIGNsYXNzLlxuICAgICAgICB0aGlzW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgI2luaXRTdGFuZGluRWwoKSB7XG4gICAgICAvLyBOZWl0aGVyIENocm9tZSBvciBGaXJlZm94IHN1cHBvcnQgc2V0dGluZyB0aGUgbXV0ZWQgYXR0cmlidXRlXG4gICAgICAvLyBhZnRlciB1c2luZyBkb2N1bWVudC5jcmVhdGVFbGVtZW50LlxuICAgICAgLy8gR2V0IGFyb3VuZCB0aGlzIGJ5IHNldHRpbmcgdGhlIG11dGVkIHByb3BlcnR5IG1hbnVhbGx5LlxuICAgICAgY29uc3QgZHVtbXlFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnLCB7IGlzIH0pO1xuICAgICAgZHVtbXlFbC5tdXRlZCA9IHRoaXMuaGFzQXR0cmlidXRlKCdtdXRlZCcpO1xuXG4gICAgICBmb3IgKGxldCB7IG5hbWUsIHZhbHVlIH0gb2YgdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIGR1bW15RWwuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4jc3RhbmRpbkVsID0ge307XG4gICAgICBmb3IgKGxldCBuYW1lIG9mIGdldE5hdGl2ZUVsUHJvcHMoZHVtbXlFbCkpIHtcbiAgICAgICAgdGhpcy4jc3RhbmRpbkVsW25hbWVdID0gZHVtbXlFbFtuYW1lXTtcbiAgICAgIH1cblxuICAgICAgLy8gdW5sb2FkIGR1bW15IHZpZGVvIGVsZW1lbnRcbiAgICAgIGR1bW15RWwucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcbiAgICAgIGR1bW15RWwubG9hZCgpO1xuICAgIH1cblxuICAgIGFzeW5jICNpbml0TmF0aXZlRWwoKSB7XG4gICAgICBpZiAodGhpcy5sb2FkQ29tcGxldGUgJiYgIXRoaXMuaXNMb2FkZWQpIGF3YWl0IHRoaXMubG9hZENvbXBsZXRlO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBuYXRpdmVFbCBieSBub3csIGNyZWF0ZSBpdCBvdXIgYmxvb2R5IHNlbHZlcy5cbiAgICAgIGlmICghdGhpcy5uYXRpdmVFbCkge1xuICAgICAgICBjb25zdCBuYXRpdmVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnLCB7IGlzIH0pO1xuICAgICAgICBuYXRpdmVFbC5wYXJ0ID0gdGFnO1xuICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kKG5hdGl2ZUVsKTtcbiAgICAgIH1cblxuICAgICAgLy8gTmVpdGhlciBDaHJvbWUgb3IgRmlyZWZveCBzdXBwb3J0IHNldHRpbmcgdGhlIG11dGVkIGF0dHJpYnV0ZVxuICAgICAgLy8gYWZ0ZXIgdXNpbmcgZG9jdW1lbnQuY3JlYXRlRWxlbWVudC5cbiAgICAgIC8vIEdldCBhcm91bmQgdGhpcyBieSBzZXR0aW5nIHRoZSBtdXRlZCBwcm9wZXJ0eSBtYW51YWxseS5cbiAgICAgIHRoaXMubmF0aXZlRWwubXV0ZWQgPSB0aGlzLmhhc0F0dHJpYnV0ZSgnbXV0ZWQnKTtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ck5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgLy8gSW5pdGlhbGl6ZSByaWdodCBhZnRlciBjb25zdHJ1Y3Rpb24gd2hlbiB0aGUgYXR0cmlidXRlcyBiZWNvbWUgYXZhaWxhYmxlLlxuICAgICAgdGhpcy4jaW5pdCgpO1xuXG4gICAgICAvLyBPbmx5IGNhbGwgbG9hZFNyYyB3aGVuIHRoZSBzdXBlciBjbGFzcyBoYXMgYSBsb2FkIG1ldGhvZC5cbiAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ3NyYycgJiYgdGhpcy5sb2FkICE9PSBTdXBlck1lZGlhLnByb3RvdHlwZS5sb2FkKSB7XG4gICAgICAgIHRoaXMuI2xvYWRTcmMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4jZm9yd2FyZEF0dHJpYnV0ZShhdHRyTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICBhc3luYyAjbG9hZFNyYygpIHtcbiAgICAgIC8vIFRoZSBmaXJzdCB0aW1lIHdlIHVzZSB0aGUgUHJvbWlzZSBjcmVhdGVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgIGlmICh0aGlzLiNoYXNMb2FkZWQpIHRoaXMubG9hZENvbXBsZXRlID0gbmV3IFB1YmxpY1Byb21pc2UoKTtcbiAgICAgIHRoaXMuI2hhc0xvYWRlZCA9IHRydWU7XG5cbiAgICAgIC8vIFdhaXQgMSB0aWNrIHRvIGFsbG93IG90aGVyIGF0dHJpYnV0ZXMgdG8gYmUgc2V0LlxuICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICBhd2FpdCB0aGlzLmxvYWQoKTtcblxuICAgICAgdGhpcy5sb2FkQ29tcGxldGU/LnJlc29sdmUoKTtcbiAgICAgIGF3YWl0IHRoaXMubG9hZENvbXBsZXRlO1xuICAgIH1cblxuICAgIGFzeW5jICNmb3J3YXJkQXR0cmlidXRlKGF0dHJOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmxvYWRDb21wbGV0ZSAmJiAhdGhpcy5pc0xvYWRlZCkgYXdhaXQgdGhpcy5sb2FkQ29tcGxldGU7XG5cbiAgICAgIC8vIElnbm9yZSBhIGZldyB0aGF0IGRvbid0IG5lZWQgdG8gYmUgcGFzc2VkICYgc2tpcHBlZCBhdHRyaWJ1dGVzLlxuICAgICAgLy8gZS5nLiBzcmM6IG5hdGl2ZSBlbGVtZW50IGlzIHVzaW5nIE1TRSBhbmQgaGFzIGEgYmxvYiB1cmwgYXMgc3JjIGF0dHJpYnV0ZS5cbiAgICAgIGlmIChbJ2lkJywgJ2NsYXNzJywgLi4udGhpcy5jb25zdHJ1Y3Rvci5za2lwQXR0cmlidXRlc10uaW5jbHVkZXMoYXR0ck5hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMubmF0aXZlRWwucmVtb3ZlQXR0cmlidXRlPy4oYXR0ck5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uYXRpdmVFbC5zZXRBdHRyaWJ1dGU/LihhdHRyTmFtZSwgbmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgdGhpcy4jaW5pdCgpO1xuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdldE5hdGl2ZUVsUHJvcHMobmF0aXZlRWxUZXN0KSB7XG4gIC8vIE1hcCBhbGwgbmF0aXZlIGVsZW1lbnQgcHJvcGVydGllcyB0byB0aGUgY3VzdG9tIGVsZW1lbnRcbiAgLy8gc28gdGhhdCB0aGV5J3JlIGFwcGxpZWQgdG8gdGhlIG5hdGl2ZSBlbGVtZW50LlxuICAvLyBTa2lwcGluZyBIVE1MRWxlbWVudCBiZWNhdXNlIG9mIHRoaW5ncyBsaWtlIFwiYXR0YWNoU2hhZG93XCJcbiAgLy8gY2F1c2luZyBpc3N1ZXMuIE1vc3Qgb2YgdGhvc2UgcHJvcHMgc3RpbGwgbmVlZCB0byBhcHBseSB0b1xuICAvLyB0aGUgY3VzdG9tIGVsZW1lbnQuXG4gIGxldCBuYXRpdmVFbFByb3BzID0gW107XG5cbiAgLy8gV2FsayB0aGUgcHJvdG90eXBlIGNoYWluIHVwIHRvIEhUTUxFbGVtZW50LlxuICAvLyBUaGlzIHdpbGwgZ3JhYiBhbGwgc3VwZXIgY2xhc3MgcHJvcHMgaW4gYmV0d2Vlbi5cbiAgLy8gaS5lLiBWaWRlb0VsZW1lbnQgYW5kIE1lZGlhRWxlbWVudFxuICBmb3IgKFxuICAgIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihuYXRpdmVFbFRlc3QpO1xuICAgIHByb3RvICYmIHByb3RvICE9PSBIVE1MRWxlbWVudC5wcm90b3R5cGU7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pXG4gICkge1xuICAgIG5hdGl2ZUVsUHJvcHMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykpO1xuICB9XG5cbiAgcmV0dXJuIG5hdGl2ZUVsUHJvcHM7XG59XG5cbi8qKlxuICogQSB1dGlsaXR5IHRvIGNyZWF0ZSBQcm9taXNlcyB3aXRoIGNvbnZlbmllbnQgcHVibGljIHJlc29sdmUgYW5kIHJlamVjdCBtZXRob2RzLlxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqL1xuY2xhc3MgUHVibGljUHJvbWlzZSBleHRlbmRzIFByb21pc2Uge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvciA9ICgpID0+IHt9KSB7XG4gICAgbGV0IHJlcywgcmVqO1xuICAgIHN1cGVyKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICByZXMgPSByZXNvbHZlO1xuICAgICAgcmVqID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIHRoaXMucmVzb2x2ZSA9IHJlcztcbiAgICB0aGlzLnJlamVjdCA9IHJlajtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU3VwZXJWaWRlb0VsZW1lbnQgPSBnbG9iYWxUaGlzLmRvY3VtZW50ID8gU3VwZXJNZWRpYU1peGluKEhUTUxFbGVtZW50LCB7IHRhZzogJ3ZpZGVvJyB9KSA6IGNsYXNzIHt9O1xuXG5leHBvcnQgY29uc3QgU3VwZXJBdWRpb0VsZW1lbnQgPSBnbG9iYWxUaGlzLmRvY3VtZW50ID8gU3VwZXJNZWRpYU1peGluKEhUTUxFbGVtZW50LCB7IHRhZzogJ2F1ZGlvJyB9KSA6IGNsYXNzIHt9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/super-media-element/super-media-element.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/wistia-video-element/dist/react.js":
/*!*********************************************************!*\
  !*** ./node_modules/wistia-video-element/dist/react.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ react_default)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _wistia_video_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wistia-video-element.js */ \"(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ // dist/react.ts\n\n\n// ../../node_modules/ce-la-react/dist/ce-la-react.js\nvar reservedReactProps = /* @__PURE__ */ new Set([\n    \"style\",\n    \"children\",\n    \"ref\",\n    \"key\",\n    \"suppressContentEditableWarning\",\n    \"suppressHydrationWarning\",\n    \"dangerouslySetInnerHTML\"\n]);\nvar reactPropToAttrNameMap = {\n    className: \"class\",\n    htmlFor: \"for\"\n};\nfunction defaultToAttributeName(propName) {\n    return propName.toLowerCase();\n}\nfunction defaultToAttributeValue(propValue) {\n    if (typeof propValue === \"boolean\") return propValue ? \"\" : void 0;\n    if (typeof propValue === \"function\") return void 0;\n    if (typeof propValue === \"object\" && propValue !== null) return void 0;\n    return propValue;\n}\nfunction createComponent(param) {\n    let { react: React2, tagName, elementClass, events, displayName, defaultProps, toAttributeName = defaultToAttributeName, toAttributeValue = defaultToAttributeValue } = param;\n    var _s = $RefreshSig$();\n    const IS_REACT_19_OR_NEWER = Number.parseInt(React2.version) >= 19;\n    const ReactComponent = React2.forwardRef(_s((props, ref)=>{\n        _s();\n        var _a, _b;\n        const elementRef = React2.useRef(null);\n        const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());\n        const eventProps = {};\n        const attrs = {};\n        const reactProps = {};\n        const elementProps = {};\n        for (const [k, v] of Object.entries(props)){\n            if (reservedReactProps.has(k)) {\n                reactProps[k] = v;\n                continue;\n            }\n            var _reactPropToAttrNameMap_k;\n            const attrName = toAttributeName((_reactPropToAttrNameMap_k = reactPropToAttrNameMap[k]) !== null && _reactPropToAttrNameMap_k !== void 0 ? _reactPropToAttrNameMap_k : k);\n            var _ref;\n            if (elementClass.prototype && k in elementClass.prototype && !(k in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) && !((_b = elementClass.observedAttributes) == null ? void 0 : _b.some((attr)=>attr === attrName))) {\n                elementProps[k] = v;\n                continue;\n            }\n            if (k.startsWith(\"on\")) {\n                eventProps[k] = v;\n                continue;\n            }\n            const attrValue = toAttributeValue(v);\n            if (attrName && attrValue != null) {\n                attrs[attrName] = String(attrValue);\n                if (!IS_REACT_19_OR_NEWER) {\n                    reactProps[attrName] = attrValue;\n                }\n            }\n            if (attrName && IS_REACT_19_OR_NEWER) {\n                const attrValueFromDefault = defaultToAttributeValue(v);\n                if (attrValue !== attrValueFromDefault) {\n                    reactProps[attrName] = attrValue;\n                } else {\n                    reactProps[attrName] = v;\n                }\n            }\n        }\n        if (typeof window !== \"undefined\") {\n            for(const propName in eventProps){\n                const callback = eventProps[propName];\n                const useCapture = propName.endsWith(\"Capture\");\n                var _ref1;\n                const eventName = ((_ref1 = events == null ? void 0 : events[propName]) !== null && _ref1 !== void 0 ? _ref1 : propName.slice(2).toLowerCase()).slice(0, useCapture ? -7 : void 0);\n                React2.useLayoutEffect({\n                    \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                        const eventTarget = elementRef == null ? void 0 : elementRef.current;\n                        if (!eventTarget || typeof callback !== \"function\") return;\n                        eventTarget.addEventListener(eventName, callback, useCapture);\n                        return ({\n                            \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                                eventTarget.removeEventListener(eventName, callback, useCapture);\n                            }\n                        })[\"createComponent.ReactComponent.useLayoutEffect\"];\n                    }\n                }[\"createComponent.ReactComponent.useLayoutEffect\"], [\n                    elementRef == null ? void 0 : elementRef.current,\n                    callback\n                ]);\n            }\n            React2.useLayoutEffect({\n                \"createComponent.ReactComponent.useLayoutEffect\": ()=>{\n                    if (elementRef.current === null) return;\n                    const newElemProps = /* @__PURE__ */ new Map();\n                    for(const key in elementProps){\n                        setProperty(elementRef.current, key, elementProps[key]);\n                        prevElemPropsRef.current.delete(key);\n                        newElemProps.set(key, elementProps[key]);\n                    }\n                    for (const [key, _value] of prevElemPropsRef.current){\n                        setProperty(elementRef.current, key, void 0);\n                    }\n                    prevElemPropsRef.current = newElemProps;\n                }\n            }[\"createComponent.ReactComponent.useLayoutEffect\"]);\n        }\n        if (typeof window === \"undefined\" && (elementClass == null ? void 0 : elementClass.getTemplateHTML) && (elementClass == null ? void 0 : elementClass.shadowRootOptions)) {\n            const { mode, delegatesFocus } = elementClass.shadowRootOptions;\n            const templateShadowRoot = React2.createElement(\"template\", {\n                shadowrootmode: mode,\n                shadowrootdelegatesfocus: delegatesFocus,\n                dangerouslySetInnerHTML: {\n                    __html: elementClass.getTemplateHTML(attrs, props)\n                }\n            });\n            reactProps.children = [\n                templateShadowRoot,\n                reactProps.children\n            ];\n        }\n        return React2.createElement(tagName, {\n            ...defaultProps,\n            ...reactProps,\n            ref: React2.useCallback({\n                \"createComponent.ReactComponent.useCallback\": (node)=>{\n                    elementRef.current = node;\n                    if (typeof ref === \"function\") {\n                        ref(node);\n                    } else if (ref !== null) {\n                        ref.current = node;\n                    }\n                }\n            }[\"createComponent.ReactComponent.useCallback\"], [\n                ref\n            ])\n        });\n    }, \"9mplyF7vgg8XUtKXUe3PLSYpH8g=\"));\n    ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : elementClass.name;\n    return ReactComponent;\n}\nfunction setProperty(node, name, value) {\n    var _a;\n    node[name] = value;\n    var _ref;\n    if (value == null && name in ((_ref = (_a = globalThis.HTMLElement) == null ? void 0 : _a.prototype) !== null && _ref !== void 0 ? _ref : {})) {\n        node.removeAttribute(name);\n    }\n}\n// dist/react.ts\nvar react_default = createComponent({\n    react: react__WEBPACK_IMPORTED_MODULE_0__,\n    tagName: \"wistia-video\",\n    elementClass: _wistia_video_element_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    toAttributeName (propName) {\n        if (propName === \"muted\") return \"\";\n        if (propName === \"defaultMuted\") return \"muted\";\n        return defaultToAttributeName(propName);\n    }\n});\n /*! Bundled license information:\n\nce-la-react/dist/ce-la-react.js:\n  (**\n   * @license\n   * Copyright 2018 Google LLC\n   * SPDX-License-Identifier: BSD-3-Clause\n   *\n   * Modified version of `@lit/react` for vanilla custom elements with support for SSR.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/wistia-video-element/dist/react.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js":
/*!************************************************************************!*\
  !*** ./node_modules/wistia-video-element/dist/wistia-video-element.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ wistia_video_element_default),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId)\n/* harmony export */ });\n/* harmony import */ var super_media_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! super-media-element */ \"(app-pages-browser)/./node_modules/super-media-element/super-media-element.js\");\nvar _a, _b;\n\nconst templateLightDOM = (_a = globalThis.document) == null ? void 0 : _a.createElement(\"template\");\nif (templateLightDOM) {\n  templateLightDOM.innerHTML = /*html*/\n  `\n  <div class=\"wistia_embed\"></div>\n  `;\n}\nconst templateShadowDOM = (_b = globalThis.document) == null ? void 0 : _b.createElement(\"template\");\nif (templateShadowDOM) {\n  templateShadowDOM.innerHTML = /*html*/\n  `\n  <style>\n    :host {\n      display: inline-block;\n      min-width: 300px;\n      min-height: 150px;\n      position: relative;\n    }\n    ::slotted(.wistia_embed) {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  </style>\n  <slot></slot>\n  `;\n}\nclass WistiaVideoElement extends super_media_element__WEBPACK_IMPORTED_MODULE_0__.SuperVideoElement {\n  static template = templateShadowDOM;\n  static skipAttributes = [\"src\"];\n  get nativeEl() {\n    var _a2;\n    return ((_a2 = this.api) == null ? void 0 : _a2.elem()) ?? this.querySelector(\"video\");\n  }\n  async load() {\n    var _a2;\n    (_a2 = this.querySelector(\".wistia_embed\")) == null ? void 0 : _a2.remove();\n    if (!this.src) {\n      return;\n    }\n    await new Promise((resolve) => setTimeout(resolve, 50));\n    const MATCH_SRC = /(?:wistia\\.com|wi\\.st)\\/(?:medias|embed)\\/(.*)$/i;\n    const id = this.src.match(MATCH_SRC)[1];\n    const options = {\n      autoPlay: this.autoplay,\n      preload: this.preload ?? \"metadata\",\n      playsinline: this.playsInline,\n      endVideoBehavior: this.loop && \"loop\",\n      chromeless: !this.controls,\n      playButton: this.controls,\n      muted: this.defaultMuted\n    };\n    this.append(templateLightDOM.content.cloneNode(true));\n    const div = this.querySelector(\".wistia_embed\");\n    if (!div.id) div.id = uniqueId(id);\n    div.classList.add(`wistia_async_${id}`);\n    const scriptUrl = \"https://fast.wistia.com/assets/external/E-v1.js\";\n    await loadScript(scriptUrl, \"Wistia\");\n    this.api = await new Promise((onReady) => {\n      globalThis._wq.push({\n        id: div.id,\n        onReady,\n        options\n      });\n    });\n  }\n  async attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === \"controls\") {\n      await this.loadComplete;\n      switch (attrName) {\n        case \"controls\":\n          this.api.bigPlayButtonEnabled(this.controls);\n          this.controls ? this.api.releaseChromeless() : this.api.requestChromeless();\n          break;\n      }\n      return;\n    }\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  }\n  // Override some methods w/ defaults if the video element is not ready yet when called.\n  // Some methods require the Wistia API instead of the native video element API.\n  get duration() {\n    var _a2;\n    return (_a2 = this.api) == null ? void 0 : _a2.duration();\n  }\n  play() {\n    this.api.play();\n    return new Promise((resolve) => this.addEventListener(\"playing\", resolve));\n  }\n}\nconst loadScriptCache = {};\nasync function loadScript(src, globalName) {\n  if (!globalName) return import(\n    /* webpackIgnore: true */\n    src\n  );\n  if (loadScriptCache[src]) return loadScriptCache[src];\n  if (self[globalName]) return self[globalName];\n  return loadScriptCache[src] = new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.defer = true;\n    script.src = src;\n    script.onload = () => resolve(self[globalName]);\n    script.onerror = reject;\n    document.head.append(script);\n  });\n}\nlet idCounter = 0;\nfunction uniqueId(prefix) {\n  const id = ++idCounter;\n  return `${prefix}${id}`;\n}\nif (globalThis.customElements && !globalThis.customElements.get(\"wistia-video\")) {\n  globalThis.customElements.define(\"wistia-video\", WistiaVideoElement);\n}\nvar wistia_video_element_default = WistiaVideoElement;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93aXN0aWEtdmlkZW8tZWxlbWVudC9kaXN0L3dpc3RpYS12aWRlby1lbGVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ3dEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrRUFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLEdBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPLEVBQUUsR0FBRztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUUiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTFZTIDA2IERldlxcRGVza3RvcFxccHJvamV0b3Nub2RlanNcXHRlc3RlXFxub2RlX21vZHVsZXNcXHdpc3RpYS12aWRlby1lbGVtZW50XFxkaXN0XFx3aXN0aWEtdmlkZW8tZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2EsIF9iO1xuaW1wb3J0IHsgU3VwZXJWaWRlb0VsZW1lbnQgfSBmcm9tIFwic3VwZXItbWVkaWEtZWxlbWVudFwiO1xuY29uc3QgdGVtcGxhdGVMaWdodERPTSA9IChfYSA9IGdsb2JhbFRoaXMuZG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG5pZiAodGVtcGxhdGVMaWdodERPTSkge1xuICB0ZW1wbGF0ZUxpZ2h0RE9NLmlubmVySFRNTCA9IC8qaHRtbCovXG4gIGBcbiAgPGRpdiBjbGFzcz1cIndpc3RpYV9lbWJlZFwiPjwvZGl2PlxuICBgO1xufVxuY29uc3QgdGVtcGxhdGVTaGFkb3dET00gPSAoX2IgPSBnbG9iYWxUaGlzLmRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2IuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuaWYgKHRlbXBsYXRlU2hhZG93RE9NKSB7XG4gIHRlbXBsYXRlU2hhZG93RE9NLmlubmVySFRNTCA9IC8qaHRtbCovXG4gIGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIG1pbi13aWR0aDogMzAwcHg7XG4gICAgICBtaW4taGVpZ2h0OiAxNTBweDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgOjpzbG90dGVkKC53aXN0aWFfZW1iZWQpIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgPC9zdHlsZT5cbiAgPHNsb3Q+PC9zbG90PlxuICBgO1xufVxuY2xhc3MgV2lzdGlhVmlkZW9FbGVtZW50IGV4dGVuZHMgU3VwZXJWaWRlb0VsZW1lbnQge1xuICBzdGF0aWMgdGVtcGxhdGUgPSB0ZW1wbGF0ZVNoYWRvd0RPTTtcbiAgc3RhdGljIHNraXBBdHRyaWJ1dGVzID0gW1wic3JjXCJdO1xuICBnZXQgbmF0aXZlRWwoKSB7XG4gICAgdmFyIF9hMjtcbiAgICByZXR1cm4gKChfYTIgPSB0aGlzLmFwaSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5lbGVtKCkpID8/IHRoaXMucXVlcnlTZWxlY3RvcihcInZpZGVvXCIpO1xuICB9XG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdmFyIF9hMjtcbiAgICAoX2EyID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiLndpc3RpYV9lbWJlZFwiKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5yZW1vdmUoKTtcbiAgICBpZiAoIXRoaXMuc3JjKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XG4gICAgY29uc3QgTUFUQ0hfU1JDID0gLyg/Ondpc3RpYVxcLmNvbXx3aVxcLnN0KVxcLyg/Om1lZGlhc3xlbWJlZClcXC8oLiopJC9pO1xuICAgIGNvbnN0IGlkID0gdGhpcy5zcmMubWF0Y2goTUFUQ0hfU1JDKVsxXTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYXV0b1BsYXk6IHRoaXMuYXV0b3BsYXksXG4gICAgICBwcmVsb2FkOiB0aGlzLnByZWxvYWQgPz8gXCJtZXRhZGF0YVwiLFxuICAgICAgcGxheXNpbmxpbmU6IHRoaXMucGxheXNJbmxpbmUsXG4gICAgICBlbmRWaWRlb0JlaGF2aW9yOiB0aGlzLmxvb3AgJiYgXCJsb29wXCIsXG4gICAgICBjaHJvbWVsZXNzOiAhdGhpcy5jb250cm9scyxcbiAgICAgIHBsYXlCdXR0b246IHRoaXMuY29udHJvbHMsXG4gICAgICBtdXRlZDogdGhpcy5kZWZhdWx0TXV0ZWRcbiAgICB9O1xuICAgIHRoaXMuYXBwZW5kKHRlbXBsYXRlTGlnaHRET00uY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIGNvbnN0IGRpdiA9IHRoaXMucXVlcnlTZWxlY3RvcihcIi53aXN0aWFfZW1iZWRcIik7XG4gICAgaWYgKCFkaXYuaWQpIGRpdi5pZCA9IHVuaXF1ZUlkKGlkKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChgd2lzdGlhX2FzeW5jXyR7aWR9YCk7XG4gICAgY29uc3Qgc2NyaXB0VXJsID0gXCJodHRwczovL2Zhc3Qud2lzdGlhLmNvbS9hc3NldHMvZXh0ZXJuYWwvRS12MS5qc1wiO1xuICAgIGF3YWl0IGxvYWRTY3JpcHQoc2NyaXB0VXJsLCBcIldpc3RpYVwiKTtcbiAgICB0aGlzLmFwaSA9IGF3YWl0IG5ldyBQcm9taXNlKChvblJlYWR5KSA9PiB7XG4gICAgICBnbG9iYWxUaGlzLl93cS5wdXNoKHtcbiAgICAgICAgaWQ6IGRpdi5pZCxcbiAgICAgICAgb25SZWFkeSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICBpZiAoYXR0ck5hbWUgPT09IFwiY29udHJvbHNcIikge1xuICAgICAgYXdhaXQgdGhpcy5sb2FkQ29tcGxldGU7XG4gICAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7XG4gICAgICAgIGNhc2UgXCJjb250cm9sc1wiOlxuICAgICAgICAgIHRoaXMuYXBpLmJpZ1BsYXlCdXR0b25FbmFibGVkKHRoaXMuY29udHJvbHMpO1xuICAgICAgICAgIHRoaXMuY29udHJvbHMgPyB0aGlzLmFwaS5yZWxlYXNlQ2hyb21lbGVzcygpIDogdGhpcy5hcGkucmVxdWVzdENocm9tZWxlc3MoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICB9XG4gIC8vIE92ZXJyaWRlIHNvbWUgbWV0aG9kcyB3LyBkZWZhdWx0cyBpZiB0aGUgdmlkZW8gZWxlbWVudCBpcyBub3QgcmVhZHkgeWV0IHdoZW4gY2FsbGVkLlxuICAvLyBTb21lIG1ldGhvZHMgcmVxdWlyZSB0aGUgV2lzdGlhIEFQSSBpbnN0ZWFkIG9mIHRoZSBuYXRpdmUgdmlkZW8gZWxlbWVudCBBUEkuXG4gIGdldCBkdXJhdGlvbigpIHtcbiAgICB2YXIgX2EyO1xuICAgIHJldHVybiAoX2EyID0gdGhpcy5hcGkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZHVyYXRpb24oKTtcbiAgfVxuICBwbGF5KCkge1xuICAgIHRoaXMuYXBpLnBsYXkoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlpbmdcIiwgcmVzb2x2ZSkpO1xuICB9XG59XG5jb25zdCBsb2FkU2NyaXB0Q2FjaGUgPSB7fTtcbmFzeW5jIGZ1bmN0aW9uIGxvYWRTY3JpcHQoc3JjLCBnbG9iYWxOYW1lKSB7XG4gIGlmICghZ2xvYmFsTmFtZSkgcmV0dXJuIGltcG9ydChcbiAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovXG4gICAgc3JjXG4gICk7XG4gIGlmIChsb2FkU2NyaXB0Q2FjaGVbc3JjXSkgcmV0dXJuIGxvYWRTY3JpcHRDYWNoZVtzcmNdO1xuICBpZiAoc2VsZltnbG9iYWxOYW1lXSkgcmV0dXJuIHNlbGZbZ2xvYmFsTmFtZV07XG4gIHJldHVybiBsb2FkU2NyaXB0Q2FjaGVbc3JjXSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgc2NyaXB0LnNyYyA9IHNyYztcbiAgICBzY3JpcHQub25sb2FkID0gKCkgPT4gcmVzb2x2ZShzZWxmW2dsb2JhbE5hbWVdKTtcbiAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZChzY3JpcHQpO1xuICB9KTtcbn1cbmxldCBpZENvdW50ZXIgPSAwO1xuZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIGNvbnN0IGlkID0gKytpZENvdW50ZXI7XG4gIHJldHVybiBgJHtwcmVmaXh9JHtpZH1gO1xufVxuaWYgKGdsb2JhbFRoaXMuY3VzdG9tRWxlbWVudHMgJiYgIWdsb2JhbFRoaXMuY3VzdG9tRWxlbWVudHMuZ2V0KFwid2lzdGlhLXZpZGVvXCIpKSB7XG4gIGdsb2JhbFRoaXMuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwid2lzdGlhLXZpZGVvXCIsIFdpc3RpYVZpZGVvRWxlbWVudCk7XG59XG52YXIgd2lzdGlhX3ZpZGVvX2VsZW1lbnRfZGVmYXVsdCA9IFdpc3RpYVZpZGVvRWxlbWVudDtcbmV4cG9ydCB7XG4gIHdpc3RpYV92aWRlb19lbGVtZW50X2RlZmF1bHQgYXMgZGVmYXVsdCxcbiAgdW5pcXVlSWRcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/wistia-video-element/dist/wistia-video-element.js\n"));

/***/ })

}]);